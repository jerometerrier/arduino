#include <Arduino.h>
#include <SoftwareSerial.h>

#define WIFISSID "" 
#define WIFIPWD  "" 
#define SERVER   "192.168.1.10"
#define IOTID    ""
#define IOTPWD   ""
#define PORT     1883


const String separator = "|";
bool pingOn = true;
bool obloqConnectMqtt = false;
bool subscribeMqttTopic = false;
static unsigned long pingInterval = 2000;

static unsigned long sendMessageInterval = 10000;
unsigned long previousPingTime = 0;
unsigned long previousSendMessageTime = 0;
bool subscribeSuccess = false;
String receiveStringIndex[10] = {};

//wifi异常断开检测变量
bool wifiConnect = false;
bool wifiAbnormalDisconnect = false;

//mqtt因为网络断开后重新连接标志
bool mqttReconnectFlag = false;
const String topicCom = "COM/ARDUINO"; //topic pour les relais
const String topicPortail = "COM/PORTAILPOS"; // topic pour la position du portail


//pin constantes
const byte pinPortillon = 2;
const byte pinPortail = 3;
const byte pinPortailPartiel = 4;
const byte pinPortailPosition = 5;
const byte pinGarage = 6;

const byte pinOut[] = {pinPortillon, pinPortail, pinPortailPartiel, pinPortailPosition, pinGarage};

SoftwareSerial softSerial(10,11);

enum state{
    WAIT,
    PINGOK,
    WIFIOK,
    MQTTCONNECTOK
}obloqState;

/********************************************************************************************
Function    : sendMessage      
Description : 通过串口向OBLOQ发送一次消息
Params      : 无
Return      : 无 
********************************************************************************************/
void sendMessage(String message)
{
    softSerial.print(message+"\r"); 
}

/********************************************************************************************
Function    : ping      
Description : 通过串口向OBLOQ发送一次字符串"|1|1|"，尝试与OBLOQ取得连接
Params      : 无
Return      : 无 
********************************************************************************************/
void ping()
{
    String pingMessage = "|1|1|";
    sendMessage(pingMessage);
}

/********************************************************************************************
Function    : connectWifi      
Description : 连接wifi   
Params      : ssid 连接wifi的ssid；pwd 连接wifi的password
Return      : 无 
********************************************************************************************/
void connectWifi(String ssid,String pwd)
{
    String wifiMessage = "|2|1|" + ssid + "," + pwd + separator;
    sendMessage(wifiMessage);
} 

/********************************************************************************************
Function    : connectMqtt      
Description : 连接DF-IoT    
Params      : server 物联网网址；port 端口；iotid 物联网登录后分配的iotid；iotpwd 物联网登录后分配的iotpwd
Return      : 无 
********************************************************************************************/
void connectMqtt(String server, String port, String iotid, String iotpwd)
{
    String mqttConnectMessage = "|4|1|1|" + server + separator + port + separator + iotid + separator + iotpwd + separator;
    Serial.println(mqttConnectMessage);
    sendMessage(mqttConnectMessage);
}

/********************************************************************************************
Function    : reconnectMqtt      
Description : 重新连接DF-IoT    
Params      : 无 
Return      : 无 
********************************************************************************************/
void reconnectMqtt()
{
    String mqttReconnectMessage = "|4|1|5|"; 
    sendMessage(mqttReconnectMessage);
}

/********************************************************************************************
Function    : publish      
Description : 向DF-IoT物联网设备发送信息    
Params      : topic DF-IoT物联网设备编号；message 发送的消息内容
Return      : 无 
********************************************************************************************/
void publish(String topic,String message)
{
    String publishMessage = "|4|1|3|" + topic + separator + message + separator;
    sendMessage(publishMessage);
}

/********************************************************************************************
Function    : subscribe      
Description : 订阅DF-IoT物联网设备     
Params      : topic DF-IoT物联网设备编号
Return      : 无 
********************************************************************************************/
void subscribe(String topic)
{
    String subscribeMessage = "|4|1|2|" + topic + separator;
    sendMessage(subscribeMessage);
}

/********************************************************************************************
Function    : splitString      
Description : 剔除分隔符，逐一提取字符串     
Params      : data[] 提取的字符串的目标储存地址；str 源字符串；delimiters 分隔符
Return      : 共提取的字符串的个数 
********************************************************************************************/
int splitString(String data[],String str,const char* delimiters)
{
  char *s = (char *)(str.c_str());
  int count = 0;
  data[count] = strtok(s, delimiters);
  while(data[count]){
    data[++count] = strtok(NULL, delimiters);
  }
  return count;
}

/********************************************************************************************
Function    : handleUart      
Description : 处理串口传回的数据      
Params      : 无   
Return      : 无 
********************************************************************************************/
void handleUart()
{
    while(softSerial.available() > 0)
    {
        String receivedata = softSerial.readStringUntil('\r');
        const char* obloqMessage = receivedata.c_str();
        // Serial.print("receivedata = ");
        // Serial.println(receivedata);
        if (strcmp(obloqMessage, "|1|1|") == 0)
    {
      Serial.println("Pong");
      pingOn = false;
      obloqState = PINGOK;
    }

    
    //Ligne de debug perso
        //Serial.println(obloqMessage);


        
        if(strcmp(obloqMessage, "|2|1|") == 0)
        {
            if(wifiConnect)
            {
                wifiConnect = false;
                wifiAbnormalDisconnect = true;
            }
        }
        else if (strstr(obloqMessage,"|2|3|") != NULL && strlen(obloqMessage) != 9)
    {
      Serial.println("Wifi ready");
            wifiConnect = true;
            if(wifiAbnormalDisconnect)
            {
                wifiAbnormalDisconnect = false;
                return;
            }
      obloqState = WIFIOK;
    }
    else if (strcmp(obloqMessage, "|4|1|1|1|") == 0)
    {
      Serial.println("Mqtt ready");
            obloqConnectMqtt = true;
            if(mqttReconnectFlag)
            {
                mqttReconnectFlag = false;
                return;
            }
            obloqState = MQTTCONNECTOK;
        }
    else if (strcmp(obloqMessage, "|4|1|2|2|1|") == 0)
    {
      Serial.println("maximum subscribed reachs");
            //subscribeMqttTopic = false;
        }
        else if (strcmp(obloqMessage, "|4|1|2|1|") == 0)
    {
      Serial.println("subscribe successed");
            //subscribeMqttTopic = false;
        }

        //DF-IoT接收到消息，topic和message传入receiveMessageCallbak函数
        else if (strstr(obloqMessage, "|4|1|5|") != NULL)
        {
            splitString(receiveStringIndex,receivedata,"|");
            receiveMessageCallbak(receiveStringIndex[3],receiveStringIndex[4]);
        }

    }
}

/********************************************************************************************
Function    : sendPing      
Description : 每隔pingInterval一段时间，通过串口向OBLOQ ping一次      
Params      : 无   
Return      : 无 
********************************************************************************************/
void sendPing()
{
    if(pingOn && millis() - previousPingTime > pingInterval)
    {
        previousPingTime = millis();
        ping();
    }
}

/********************************************************************************************
Function    : execute      
Description : 根据OBLOQ的状态，进行下一步相应操作。      
Params      : 无
Return      : 无 
********************************************************************************************/
void execute()
{
    switch(obloqState)
    {
        case PINGOK: connectWifi(WIFISSID,WIFIPWD); obloqState = WAIT; break;
        case WIFIOK: connectMqtt(SERVER,String(PORT),IOTID,IOTPWD);obloqState = WAIT; break;
        case MQTTCONNECTOK :  obloqState = WAIT; break;
        default: break;
    }
}

/********************************************************************************************
Function    : subscribeSingleTopic      
Description : 监听单个DF-IoT物联网设备  
Params      : topic DF-IoT物联网设备编号
Return      : 无 
********************************************************************************************/
void subscribeSingleTopic(String topic)
{
    if(!subscribeMqttTopic && obloqConnectMqtt)
    {
        subscribeMqttTopic = true;
        subscribe(topic);
    }    
}

/********************************************************************************************
Function    : checkWifiState      
Description : 检查wifi状态
Params      : 无
Return      : 无 
********************************************************************************************/
void checkWifiState()
{
    static unsigned long previousTime = 0;
    static bool reconnectWifi = false;
    if(wifiAbnormalDisconnect && millis() - previousTime > 60000)
    {
        previousTime = millis();
        reconnectWifi = true;
        obloqConnectMqtt = false;
        Serial.println("Wifi abnormal disconnect");
        connectWifi(WIFISSID,WIFIPWD);
    }
    if(!wifiAbnormalDisconnect && reconnectWifi)
    {
        reconnectWifi = false;
        mqttReconnectFlag = true;
        Serial.println("Reconnect mqtt");
        reconnectMqtt();
    }
}

/********************************************************************************************
Function    : receiveMessageCallbak      
Description : 接收消息的回调函数  
Params      : topic 发出消息的DF-IoT物联网设备编号；message 收到的消息内容
Return      : 无 
********************************************************************************************/
void receiveMessageCallbak(String topic,String message)
{
    Serial.println("Message from: " + topic);
    Serial.println("Message content: " + message);
  
    if(message.equals("portillon"))
    {
      useRelay (pinPortillon,200);
      publish(topicCom,"Portillon ouvert");
    }
    
    else if(message.equals("portail"))
    {
      useRelay (pinPortail,200);
      publish(topicCom,"Portail ouvert");
    }
    
    else if(message.equals("portailPartiel"))
    {
      useRelay (pinPortailPartiel,200);
      publish(topicCom,"Portail partiellement ouvert");
    }

/*      switch(obloqCom)
    {
        case portillon: useRelay (LED_BUILTIN,100);obloqCom = wait; break;
        case portail: useRelay (LED_BUILTIN,2000);obloqCom = wait; break;
        case portailPartiel :  useRelay (LED_BUILTIN,5000);obloqCom = wait; break;
        default: break;
    }
*/    
}

/********************************************************************************************
Function    : useRelay     
Description : declencher le relais concerné
Params      : pin : numéro du pin du relais ; delai : temps de mise à 1 du relais
Return      : 
********************************************************************************************/
void useRelay (int pin,int delai)
{
  digitalWrite(pin,HIGH);
  delay(delai);
  digitalWrite(pin,LOW);
  
}

void readPin()
{
      if(obloqConnectMqtt && millis() - previousSendMessageTime > 3000) //每隔5s，向Hy6z0Pb1G设备发送消息，消息内容是此时读取的LM35温度数据
    {
        previousSendMessageTime = millis();
        //获取温度数据
        byte posPortail = digitalRead(pinPortailPosition);
        Serial.println(posPortail);

        if (posPortail == 0) //portail ouvert
        {
          publish(topicPortail,"0"); 
        }
        else if (posPortail == 1) //portail ouvert
        {
          publish(topicPortail,"1"); 
        }
        
        
}
}

void setup()
{
    Serial.begin(9600);
    softSerial.begin(9600); 
    //initialisation des pins
        for (int i = 0; i < 4; i++) 
        {
          pinMode(pinOut[i], OUTPUT);       // Toutes les pins sont commutées en OUT
        }
      
}

void loop()
{
    sendPing();
    execute();
    subscribeSingleTopic(topicCom);
    handleUart();
    checkWifiState();
    readPin();
}
